/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_STUB_H_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_STUB_H_



#include <org/genivi/mediamanager/MediaTypes.h>

#include "Indexer.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Indexer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class IndexerStubAdapter: virtual public CommonAPI::StubAdapter, public Indexer {
 public:



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Indexer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IndexerStubRemoteEvent {
 public:
    virtual ~IndexerStubRemoteEvent() { }


};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Indexer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IndexerStub: public virtual CommonAPI::Stub<IndexerStubAdapter, IndexerStubRemoteEvent> {
public:
    virtual ~IndexerStub() { }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * Example comment
     */
    /// Provides getter access to the attribute indexerStatus
    virtual const Indexer::IndexerStatus& getIndexerStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// This is the method that will be called on remote calls on the method getDatabasePath.
    virtual void getDatabasePath(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string& output, Indexer::IndexerError& e) = 0;
    /// This is the method that will be called on remote calls on the method stopIndexing.
    virtual void stopIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) = 0;
    /// This is the method that will be called on remote calls on the method startIndexing.
    virtual void startIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) = 0;

    using CommonAPI::Stub<IndexerStubAdapter, IndexerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<IndexerStubAdapter, IndexerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<IndexerStubAdapter, IndexerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef IndexerStubRemoteEvent RemoteEventType;
    typedef Indexer StubInterface;
};

} // namespace mediamanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_STUB_H_
