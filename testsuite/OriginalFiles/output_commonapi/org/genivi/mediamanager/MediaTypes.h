/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Media_Types_H_
#define ORG_GENIVI_MEDIAMANAGER_Media_Types_H_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/types.h>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

namespace MediaTypes {
    enum class MediaManagerError: int32_t {
        NO_ERROR
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct MediaManagerErrorComparator;
    enum class BackendError: int32_t {
        NO_ERROR = MediaManagerError::NO_ERROR
        ,
        BACKEND_UNREACHABLE
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct BackendErrorComparator;

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, BackendError& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const BackendError& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct BackendErrorComparator {
    inline bool operator()(const BackendError& lhs, const BackendError& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};


inline bool operator==(const BackendError& lhs, const MediaTypes::MediaManagerError& rhs) {
    return static_cast<int32_t>(lhs) == static_cast<int32_t>(rhs);
}
inline bool operator==(const MediaTypes::MediaManagerError& lhs, const BackendError& rhs) {
    return static_cast<int32_t>(lhs) == static_cast<int32_t>(rhs);
} 
inline bool operator!=(const BackendError& lhs, const MediaTypes::MediaManagerError& rhs) {
    return static_cast<int32_t>(lhs) != static_cast<int32_t>(rhs);
}
inline bool operator!=(const MediaTypes::MediaManagerError& lhs, const BackendError& rhs) {
    return static_cast<int32_t>(lhs) != static_cast<int32_t>(rhs);
} 
inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, MediaManagerError& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const MediaManagerError& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct MediaManagerErrorComparator {
    inline bool operator()(const MediaManagerError& lhs, const MediaManagerError& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.mediamanager.MediaTypes";
    return typeCollectionName;
}


} // namespace MediaTypes

} // namespace mediamanager
} // namespace genivi
} // namespace org

namespace CommonAPI {

    template<>
    struct BasicTypeWriter<org::genivi::mediamanager::MediaTypes::BackendError> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::mediamanager::MediaTypes::BackendError> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::mediamanager::MediaTypes::BackendError>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::mediamanager::MediaTypes::BackendError> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::mediamanager::MediaTypes::BackendError>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::mediamanager::MediaTypes::MediaManagerError> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::mediamanager::MediaTypes::MediaManagerError> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::mediamanager::MediaTypes::MediaManagerError>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::mediamanager::MediaTypes::MediaManagerError> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::mediamanager::MediaTypes::MediaManagerError>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };

}


namespace std {
    //Hash for BackendError
    template<>
    struct hash<org::genivi::mediamanager::MediaTypes::BackendError> {
        inline size_t operator()(const org::genivi::mediamanager::MediaTypes::BackendError& backendError) const {
            return static_cast<int32_t>(backendError);
        }
    };
    //Hash for MediaManagerError
    template<>
    struct hash<org::genivi::mediamanager::MediaTypes::MediaManagerError> {
        inline size_t operator()(const org::genivi::mediamanager::MediaTypes::MediaManagerError& mediaManagerError) const {
            return static_cast<int32_t>(mediaManagerError);
        }
    };
}

#endif // ORG_GENIVI_MEDIAMANAGER_Media_Types_H_
