/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#include "IndexerDBusProxy.h"

namespace org {
namespace genivi {
namespace mediamanager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createIndexerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<IndexerDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

INITIALIZER(registerIndexerDBusProxy) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(Indexer::getInterfaceId(),
       &createIndexerDBusProxy);
}

IndexerDBusProxy::IndexerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
,indexerStatus_(*this, "u", "getIndexerStatusAttribute")
    {
    }

IndexerDBusProxy::IndexerStatusAttribute& IndexerDBusProxy::getIndexerStatusAttribute() {
    return indexerStatus_;
}


void IndexerDBusProxy::getDatabasePath(CommonAPI::CallStatus& callStatus, std::string& output, Indexer::IndexerError& e) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::string, Indexer::IndexerError> >::callMethodWithReply(
        *this,
        "getDatabasePath",
        "",
        callStatus
        , output, e);
}
std::future<CommonAPI::CallStatus> IndexerDBusProxy::getDatabasePathAsync(GetDatabasePathAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::string, Indexer::IndexerError> >::callMethodAsync(
        *this,
        "getDatabasePath",
        "",
        std::move(callback));
}
void IndexerDBusProxy::stopIndexing(CommonAPI::CallStatus& callStatus, Indexer::IndexerError& e) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<Indexer::IndexerError> >::callMethodWithReply(
        *this,
        "stopIndexing",
        "",
        callStatus
        , e);
}
std::future<CommonAPI::CallStatus> IndexerDBusProxy::stopIndexingAsync(StopIndexingAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<Indexer::IndexerError> >::callMethodAsync(
        *this,
        "stopIndexing",
        "",
        std::move(callback));
}
void IndexerDBusProxy::startIndexing(CommonAPI::CallStatus& callStatus, Indexer::IndexerError& e) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<Indexer::IndexerError> >::callMethodWithReply(
        *this,
        "startIndexing",
        "",
        callStatus
        , e);
}
std::future<CommonAPI::CallStatus> IndexerDBusProxy::startIndexingAsync(StartIndexingAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<Indexer::IndexerError> >::callMethodAsync(
        *this,
        "startIndexing",
        "",
        std::move(callback));
}



void IndexerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

} // namespace mediamanager
} // namespace genivi
} // namespace org
