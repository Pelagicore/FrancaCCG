
-- Franca IDL grammar file
-- Author	Jesper Lundqvist
-- Version	0.3

-- Usage: Use with BNFC software suite. See README file for instructions.


-- definitions
Prog.			Program	::= [Def] ;

-- A Franca IDL file consist of a series of definitions.
DPackage.		Def ::= "package" PackageName ;
DPackageName.		PackageName ::= [NamespaceID] ;
DInterface.		Def ::= "interface" Id "{" IBody "}" ;
terminator Def "" ;


-- This is a bit lazy - I define a type collection in the same way as an interface.
-- This is to avoid having separate definitions for the same structure, 
-- e.g. Enumerations as IBodyItem and TypeCollectionItem.
DTypeCollection.	Def ::= "typeCollection" Id "{" IBody "}" ;


-- Import from another Franca file. Not sure how this should be handled. What to import?
DImport.		Def ::= "import" Namespace ".*" "from" "\"" FileName "\"" ;
DFileName.		FileName ::= Id "." FileEnding ;
DFileNameNoEnd.		FileName ::= Id ;
DFileEnding.		FileEnding ::= Id ;
DNamespace.		Namespace ::= [NamespaceID] ;
DNamespaceID.		NamespaceID ::= Id ;
separator NamespaceID "." ;



-- Interfaces consist of a number of interface body items.
DIBody.			IBody ::= [IBodyItem] ;
terminator IBodyItem "" ;
--separator IBodyItem "" ;


-- Methods are one kind of interface body item. They can have either in- or out-parameters, both, or none.
DMethod.		IBodyItem ::= "method" Id "{" "}" ;
DInMethod.		IBodyItem ::= "method" Id "{" "in" "{" [InVari] "}" "}" ;
DOutMethod.		IBodyItem ::= "method" Id "{" "out" "{" [OutVari] "}" "}" ;
DInOutMethod.		IBodyItem ::= "method" Id "{" "in" "{" [InVari] "}" "out" "{" [OutVari] "}" "}" ;

-- Version is another interface body item.
DVersion.		IBodyItem ::= "version" "{" "major" Integer "minor" Integer "}" ;


-- Attributes are also an interface body item.
-- Due to only two attribute flags being possible, the combinations are listed here separately to make code generation easier.
DAttrib.		IBodyItem ::= "attribute" Type Id ;
DAttribReadOnly.	IBodyItem ::= "attribute" Type Id "readonly" ;
DAttribNoSub.		IBodyItem ::= "attribute" Type Id "noSubscriptions" ;
DAttribReadOnlyNoSub.	IBodyItem ::= "attribute" Type Id "readonly" "noSubscriptions" ;
-- This last one should probably be removed as standard Franca compiler does not accept it.
DAttribReadOnlyNoSub2.	IBodyItem ::= "attribute" Type Id "noSubscriptions" "readonly" ;


-- Parameters consist of a type and an id.
DInVar.			InVari ::= Type Id ;
DOutVar.		OutVari ::= Type Id ;
DVar.			Vari ::= Type Id ;
--DVarArr.		Vari ::= Type "[]" Id ;
terminator Vari "" ;
terminator InVari "" ;
terminator OutVari "" ;


-- Enumerations (interface body item)
DEnumDef.		IBodyItem ::= "enumeration" Id "{" EnumList "}" ;
DExtendedEnumDef.	IBodyItem ::= "enumeration" EnumId "extends" Id "{" EnumList "}" ;

DEnumIdent.		EnumId ::= Id ;
DEnumList.		EnumList ::= [Enum] ;
terminator Enum "" ;
DEnum.			Enum ::= Id ;
DEnumValue.		Enum ::= Id "=" Integer ;


-- Typedefs
DTypeDef.		IBodyItem ::= "typedef" TypeDefId "is" Type ;
DTypeDefCustom.		IBodyItem ::= "typedef" TypeDefId "is" Id ;
DTypeDefIdent.		TypeDefId ::= Id ;


-- Franca IDL types
-- Note that Float, ByteBuffer and Int8 are not defined as D-Bus types in the D-Bus standard.

DUIntEight.		Type ::= "UInt8" ;
DIntEight.		Type ::= "Int8" ;
DUIntSixteen.		Type ::= "UInt16" ;
DIntSixteen.		Type ::= "Int16" ;
DUIntThirtyTwo.		Type ::= "UInt32" ;
DIntThirtyTwo.		Type ::= "Int32" ;
DUIntSixtyFour.		Type ::= "UInt64" ;
DIntSixtyFour.		Type ::= "Int64" ;
DBoolean.		Type ::= "Boolean" ;
DFloat.			Type ::= "Float" ;
DDouble.		Type ::= "Double" ;
DString.		Type ::= "String" ;
DByteBuffer.		Type ::= "ByteBuffer" ;


-- Identifiers


token Id (letter (letter | digit | '_')*) ;


-- Regular comments
comment "//" ;
comment "/*" "*/" ;

-- Structured comments. These will be implemented later; for now consider them regular comments.
comment "<**" "**>" ;
