/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_STUB_ADAPTER_H_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_STUB_ADAPTER_H_

#include <org/genivi/mediamanager/IndexerStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<IndexerStub> IndexerDBusStubAdapterHelper;

class IndexerDBusStubAdapterInternal: public virtual IndexerStubAdapter, public IndexerDBusStubAdapterHelper {
 public:
    IndexerDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~IndexerDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();




    const IndexerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        IndexerStub,
        CommonAPI::Version
        > getIndexerInterfaceVersionStubDispatcher;

/**
 * Example comment
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        IndexerStub,
        Indexer::IndexerStatus
        > getIndexerStatusAttributeStubDispatcher;


static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    IndexerStub,
    std::tuple<>,
    std::tuple<std::string, Indexer::IndexerError>
    > getDatabasePathStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    IndexerStub,
    std::tuple<>,
    std::tuple<Indexer::IndexerError>
    > stopIndexingStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    IndexerStub,
    std::tuple<>,
    std::tuple<Indexer::IndexerError>
    > startIndexingStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    IndexerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class IndexerDBusStubAdapter: public IndexerDBusStubAdapterInternal, public std::enable_shared_from_this<IndexerDBusStubAdapter> {
public:
    IndexerDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            IndexerDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace mediamanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_DBUS_STUB_ADAPTER_H_
