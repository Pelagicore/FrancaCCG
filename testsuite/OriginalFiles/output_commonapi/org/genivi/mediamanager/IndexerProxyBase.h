/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_PROXY_BASE_H_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_PROXY_BASE_H_

#include "Indexer.h"


#include <org/genivi/mediamanager/MediaTypes.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.h>
#include <CommonAPI/Proxy.h>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

class IndexerProxyBase: virtual public CommonAPI::Proxy {
 public:
    typedef CommonAPI::ReadonlyAttribute<Indexer::IndexerStatus> IndexerStatusAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const Indexer::IndexerError&)> GetDatabasePathAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Indexer::IndexerError&)> StopIndexingAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Indexer::IndexerError&)> StartIndexingAsyncCallback;

    /**
     * Example comment
     */
    virtual IndexerStatusAttribute& getIndexerStatusAttribute() = 0;


    virtual void getDatabasePath(CommonAPI::CallStatus& callStatus, std::string& output, Indexer::IndexerError& e) = 0;
    virtual std::future<CommonAPI::CallStatus> getDatabasePathAsync(GetDatabasePathAsyncCallback callback) = 0;
    virtual void stopIndexing(CommonAPI::CallStatus& callStatus, Indexer::IndexerError& e) = 0;
    virtual std::future<CommonAPI::CallStatus> stopIndexingAsync(StopIndexingAsyncCallback callback) = 0;
    virtual void startIndexing(CommonAPI::CallStatus& callStatus, Indexer::IndexerError& e) = 0;
    virtual std::future<CommonAPI::CallStatus> startIndexingAsync(StartIndexingAsyncCallback callback) = 0;
};

} // namespace mediamanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_PROXY_BASE_H_
