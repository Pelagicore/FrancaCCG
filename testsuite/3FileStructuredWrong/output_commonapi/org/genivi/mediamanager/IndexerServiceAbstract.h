/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#pragma once

#include <org/genivi/mediamanager/IndexerStub.h>
#include <sstream>
#include <assert.h>

namespace org {
namespace genivi {
namespace mediamanager {

/**
 * Provides an abstract implementation for IndexerStub.
 * That abstract class is suitable if your service ignores which client is interactng with it.
 * All the methods and attribute getters/setters are pure virtual, which ensures that any change in the interface
 * definition will likely cause a compile error in the service implementation.
 */
class IndexerServiceAbstract : public IndexerStub {
 public:
    IndexerServiceAbstract() :
        remoteEventHandler_(this), interfaceVersion_(Indexer::getInterfaceVersion()) {
}

    IndexerStubRemoteEvent* initStubAdapter(const std::shared_ptr<IndexerStubAdapter>& stubAdapter) {
    stubAdapters_.push_back(stubAdapter);
    return &remoteEventHandler_;
}






 protected:
    std::vector<std::shared_ptr<IndexerStubAdapter>> stubAdapters_;
 private:
    class RemoteEventHandler: public IndexerStubRemoteEvent {
     public:
        RemoteEventHandler(IndexerServiceAbstract* defaultStub) :
        defaultStub_(defaultStub) {
}


     private:
        IndexerServiceAbstract* defaultStub_;
    };

    RemoteEventHandler remoteEventHandler_;

    CommonAPI::Version interfaceVersion_;

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) override {
    	return interfaceVersion_;
   	}

};

} // namespace mediamanager
} // namespace genivi
} // namespace org

