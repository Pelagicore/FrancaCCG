/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#include <org/genivi/mediamanager/IndexerStubDefault.h>

namespace org {
namespace genivi {
namespace mediamanager {

IndexerStubDefault::IndexerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Indexer::getInterfaceVersion()) {
}

const CommonAPI::Version& IndexerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) {
    return interfaceVersion_;
}

IndexerStubRemoteEvent* IndexerStubDefault::initStubAdapter(const std::shared_ptr<IndexerStubAdapter>& stubAdapter) {
    CommonAPI::Stub<IndexerStubAdapter, IndexerStubRemoteEvent>::stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}

const Indexer::IndexerStatus& IndexerStubDefault::getIndexerStatusAttribute() {
    return indexerStatusAttributeValue_;
}

const Indexer::IndexerStatus& IndexerStubDefault::getIndexerStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    return getIndexerStatusAttribute();
}

void IndexerStubDefault::setIndexerStatusAttribute(Indexer::IndexerStatus value) {
    trySetIndexerStatusAttribute(std::move(value));
}

bool IndexerStubDefault::trySetIndexerStatusAttribute(Indexer::IndexerStatus value) {
    if (!validateIndexerStatusAttributeRequestedValue(value))
        return false;

    const bool valueChanged = (indexerStatusAttributeValue_ != value);
    indexerStatusAttributeValue_ = std::move(value);
    return valueChanged;
}

bool IndexerStubDefault::validateIndexerStatusAttributeRequestedValue(const Indexer::IndexerStatus& value) {
    return true;
}



void IndexerStubDefault::getDatabasePath(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string& output, Indexer::IndexerError& e) {
    // Call old style methods in default 
    getDatabasePath(output, e);
}
void IndexerStubDefault::getDatabasePath(std::string& output, Indexer::IndexerError& e) {
    // No operation in default
}

void IndexerStubDefault::stopIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) {
    // Call old style methods in default 
    stopIndexing(e);
}
void IndexerStubDefault::stopIndexing(Indexer::IndexerError& e) {
    // No operation in default
}

void IndexerStubDefault::startIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) {
    // Call old style methods in default 
    startIndexing(e);
}
void IndexerStubDefault::startIndexing(Indexer::IndexerError& e) {
    // No operation in default
}




IndexerStubDefault::RemoteEventHandler::RemoteEventHandler(IndexerStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace mediamanager
} // namespace genivi
} // namespace org
